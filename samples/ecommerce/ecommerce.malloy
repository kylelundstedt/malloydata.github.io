--! styles ecommerce.styles.json
explore: users is table('malloy-data.ecomm.users'){
  primary_key: id
  measure: user_count is count()
}

explore: product is table('malloy-data.ecomm.products'){
  primary_key: id
  measure: product_count is count()
}

explore: ii is table('malloy-data.ecomm.inventory_items'){
  primary_key: id

  join: product on product_id

  measure: [
    item_count is count(distinct id)
    total_cost is sum(cost)
  ]
}

explore: user_order_facts is from(
    table('malloy-data.ecomm.order_items') ->  {
      group_by: user_id
      aggregate: lifetime_orders is count()
    }
  ) { primary_key: user_id }

explore: order_items_base is table('malloy-data.ecomm.order_items'){
  primary_key: id

  join: users on user_id
  join: ii on inventory_item_id
  join: user_order_facts on user_id

  -- join: [
  --   users on user_id
  --   ii on inventory_item_id
  --   user_order_facts on user_id
  -- ]

  measure: [
    order_count is count(distinct order_id)
    item_count is count(*)
    total_sales is sale_price.sum()
  ]
}

-- --brand synergy / affinity analysis; extends base order_items
-- export define brand_synergy is (
--   order_items_base
--   | reduce
--     order_id
--     brand1 is (reduce
--       ii.product.brand
--     )
--     brand2 is (reduce
--       ii.product.brand
--     )
--   | project : [brand1.brand != brand2.brand]
--     order_id
--     brand1 is brand1.brand
--     brand2 is brand2.brand
--   | reduce
--     brand1
--     brand2
--     occurances is count()
--   | reduce
--     brand is brand1
--     synergies is (project top 5 order by occurances desc
--       brand is brand2
--       occurances
--     )
-- );

explore: order_items is order_items_base {

  -- join: brand_synergy on ii.product.brand

  query: top_brands is {
    top: 5
    order_by: total_sales
    group_by: ii.product.brand
    aggregate: [
      total_sales
      ii.product.product_count
    ]
  }

  query: top_products is {
    top: 5
    group_by: ii.product.name
    aggregate: total_sales
  }

  query: by_year is {
    group_by: created_year is created_at.year
    aggregate: total_sales
  }

  query: by_month is {
    group_by: created_month is created_at.month
    aggregate: total_sales
  }

  query: sales_by_state_2020 is {
    where: created_at = @2020
    group_by: users.state
    aggregate: total_sales
  }

  query: sales_by_month_2020 is {
    where: created_at = @2020
    group_by: order_month is created_at.month
    aggregate: total_sales
  }

  query: orders_by_status is {
    group_by: status
    aggregate: order_count is count(distinct order_id)
  }

  query: order_by_category_and_day is {
    group_by: [
      created_month is created_at.month
      ii.product.category
    ]
    aggregate: order_count
  }

  query: brand_dashboard is {
    top: 10
    group_by: [
      ii.product.brand
    ]
    aggregate: [
      total_sales
      order_count
      item_count
      ii.product.product_count
    ]
    nest: [
      top_products
      by_month
    ]

    -- nest: synergistic_brands is {
    --   group by: brandy_synergy.synergies.brand
    --   aggregate: occurances is brand_synergy.synergies.occurances.sum()
    -- }
  }
}

-- -- order_items with brand_synergy as well as base definitions.
-- export define order_items is (explore order_items_base
--   brand_synergy is join on ii.product.brand


query: order_items -> {
  aggregate: average_age is users.age.avg()
}

query: users -> {
  aggregate: average_age is age.avg()
}
