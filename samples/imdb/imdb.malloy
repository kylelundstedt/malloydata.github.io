

source: people is table('coconut-crab.movies.imdb_people') + {
  primary_key: nconst
  declare:
    person_count is count(distinct nconst)
}

sql: sql_cast_crew is ||
  SELECT 
    * except(crew,characters),
    ARRAY((SELECT AS STRUCT value  
      FROM  UNNEST(split(crew,',')) as value )) as crew,
    ARRAY((SELECT AS STRUCT value  
      FROM  UNNEST(split(characters,',')) as value )) as characters
  FROM `coconut-crab.movies.imdb_cast_crew`
;;

source: cast_crew is from_sql(sql_cast_crew) + {
  primary_key: tconst
  join_one: people on crew.value=people.nconst
}

sql: sql_titles is ||
  SELECT 
    * except(genres),
    ARRAY((SELECT AS STRUCT value  
      FROM  UNNEST(split(genres,',')) as value )) as genres
  FROM `coconut-crab.movies.imdb_titles`
;;

source: titles is from_sql(sql_titles) + {

  join_one: cast_crew with tconst
  declare:
    title_count is count(distinct tconst)
    cast_count is cast_crew.people.person_count

  query: by_type is {
    group_by: titleType
    aggregate: title_count
  }
  query: by_year is {
    group_by: startYear
    aggregate: title_count
    order_by: startYear desc
  }

  query: by_name is {
    group_by: cast_crew.people.primaryName
    aggregate: title_count
  }

  query: by_role is {
    group_by: cast_crew.role
    aggregate: title_count
  }

  query: by_genre is {
    group_by: genres.value
    aggregate: title_count
  }

  query: by_language is {
    where: language != null & '\\N'
    group_by: language
  }

  query: by_cast is {
    group_by: cast_crew.role
    aggregate: cast_count
    nest: by_name_list is by_name + {limit: 200}
  }
}

